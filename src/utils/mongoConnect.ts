import mongoose, { ConnectOptions } from 'mongoose';

const MONGO_URL = process.env.MONGO_PUBLIC_URL || '';

if (!MONGO_URL) {
  console.error('‚ùå Kh√¥ng t√¨m th·∫•y URL k·∫øt n·ªëi MongoDB');
}

interface MongooseCache {
  conn: mongoose.Connection | null;
  promise: Promise<mongoose.Mongoose> | null;
}

const globalWithMongoose = global as typeof global & {
  mongoose?: MongooseCache;
};

let cached: MongooseCache = { conn: null, promise: null };

if (globalWithMongoose.mongoose) {
  cached = globalWithMongoose.mongoose;
}

async function connectMongoDB() {
  // N·∫øu ƒë√£ k·∫øt n·ªëi, tr·∫£ v·ªÅ k·∫øt n·ªëi hi·ªán t·∫°i
  if (cached.conn) {
    console.log('‚úÖ S·ª≠ d·ª•ng k·∫øt n·ªëi MongoDB hi·ªán t·∫°i');
    return cached.conn;
  }

  // N·∫øu ch∆∞a c√≥ promise k·∫øt n·ªëi, t·∫°o m·ªõi
  if (!cached.promise) {
    console.log('üöÄ B·∫Øt ƒë·∫ßu k·∫øt n·ªëi MongoDB');
    
    // S·ª≠ d·ª•ng c√°c t√πy ch·ªçn k·∫øt n·ªëi ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi mongoose
    const options: ConnectOptions = {
      autoIndex: true,
    };

    cached.promise = mongoose.connect(MONGO_URL, options).then((mongooseConnection) => {
      cached.conn = mongooseConnection.connection;
      console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng');
      return mongooseConnection;
    });
  }

  try {
    await cached.promise;
    return cached.conn;
  } catch (e) {
    cached.promise = null;
    console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', e);
    throw e;
  }
}

// X·ª≠ l√Ω ng·∫Øt k·∫øt n·ªëi khi ·ª©ng d·ª•ng d·ª´ng
process.on('SIGINT', async () => {
  try {
    await mongoose.connection.close();
    console.log('üîå ƒê√≥ng k·∫øt n·ªëi MongoDB');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå L·ªói ƒë√≥ng k·∫øt n·ªëi MongoDB:', error);
    process.exit(1);
  }
});

export default connectMongoDB;